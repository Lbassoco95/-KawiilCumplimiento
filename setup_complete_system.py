#!/usr/bin/env python3
"""
Script de Configuraci√≥n Completa del Sistema
Gu√≠a al usuario a trav√©s de la configuraci√≥n del sistema de an√°lisis inicial y seguimiento semanal
"""

import os
import sys
import logging
from datetime import datetime
from dotenv import load_dotenv

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment_variables():
    """Verificar variables de entorno requeridas"""
    print("üîç Verificando variables de entorno...")
    
    load_dotenv()
    
    required_vars = {
        "OPENAI_API_KEY": "OpenAI API Key (requerido para enriquecimiento)",
        "PINECONE_API_KEY": "Pinecone API Key (base de datos vectorial)",
        "PINECONE_INDEX_NAME": "Nombre del √≠ndice de Pinecone",
        "DROPBOX_APP_KEY": "Dropbox App Key",
        "DROPBOX_APP_SECRET": "Dropbox App Secret", 
        "DROPBOX_REFRESH_TOKEN": "Dropbox Refresh Token",
        "SLACK_BOT_TOKEN": "Slack Bot Token",
        "SLACK_APP_TOKEN": "Slack App Token"
    }
    
    missing_vars = []
    configured_vars = []
    
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value:
            configured_vars.append(var)
            print(f"‚úÖ {var}: Configurado")
        else:
            missing_vars.append(var)
            print(f"‚ùå {var}: Faltante - {description}")
    
    print(f"\nüìä Resumen:")
    print(f"   ‚úÖ Variables configuradas: {len(configured_vars)}")
    print(f"   ‚ùå Variables faltantes: {len(missing_vars)}")
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è Variables faltantes: {', '.join(missing_vars)}")
        print("Configura estas variables en tu archivo .env antes de continuar")
        return False
    
    print("‚úÖ Todas las variables de entorno est√°n configuradas")
    return True

def test_connections():
    """Probar conexiones con servicios externos"""
    print("\nüîç Probando conexiones con servicios externos...")
    
    tests = []
    
    # Test OpenAI
    try:
        from openai import OpenAI
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": "test"}],
            max_tokens=5
        )
        print("‚úÖ OpenAI: Conectado")
        tests.append(("OpenAI", True))
    except Exception as e:
        print(f"‚ùå OpenAI: Error - {e}")
        tests.append(("OpenAI", False))
    
    # Test Pinecone
    try:
        from pinecone import Pinecone
        pc = Pinecone(api_key=os.getenv("PINECONE_API_KEY"))
        index = pc.Index(os.getenv("PINECONE_INDEX_NAME"))
        stats = index.describe_index_stats()
        print(f"‚úÖ Pinecone: Conectado ({stats.total_vector_count} vectores)")
        tests.append(("Pinecone", True))
    except Exception as e:
        print(f"‚ùå Pinecone: Error - {e}")
        tests.append(("Pinecone", False))
    
    # Test Dropbox
    try:
        from dropbox_auth_manager import test_dropbox_connection
        if test_dropbox_connection():
            print("‚úÖ Dropbox: Conectado")
            tests.append(("Dropbox", True))
        else:
            print("‚ùå Dropbox: Error de conexi√≥n")
            tests.append(("Dropbox", False))
    except Exception as e:
        print(f"‚ùå Dropbox: Error - {e}")
        tests.append(("Dropbox", False))
    
    # Test Slack
    try:
        from slack_bolt import App
        app = App(token=os.getenv("SLACK_BOT_TOKEN"))
        print("‚úÖ Slack: Configurado")
        tests.append(("Slack", True))
    except Exception as e:
        print(f"‚ùå Slack: Error - {e}")
        tests.append(("Slack", False))
    
    # Resumen de pruebas
    successful_tests = sum(1 for _, success in tests if success)
    total_tests = len(tests)
    
    print(f"\nüìä Resumen de conexiones:")
    print(f"   ‚úÖ Exitosas: {successful_tests}/{total_tests}")
    
    if successful_tests == total_tests:
        print("üéâ Todas las conexiones funcionan correctamente")
        return True
    else:
        print("‚ö†Ô∏è Algunas conexiones fallaron. Revisa la configuraci√≥n.")
        return False

def run_initial_analysis():
    """Ejecutar an√°lisis inicial completo"""
    print("\nüöÄ EJECUTANDO AN√ÅLISIS INICIAL COMPLETO")
    print("=" * 50)
    
    try:
        from initial_document_analysis import InitialDocumentAnalyzer
        
        print("üìã Este proceso:")
        print("   ‚Ä¢ Escanear√° todos los documentos en Dropbox")
        print("   ‚Ä¢ Analizar√° cada documento con OpenAI")
        print("   ‚Ä¢ Generar√° metadatos enriquecidos")
        print("   ‚Ä¢ Subir√° vectores a Pinecone")
        print("   ‚Ä¢ Puede tomar tiempo dependiendo del n√∫mero de archivos")
        
        confirm = input("\n¬øContinuar con el an√°lisis inicial? (s/n): ").lower()
        if confirm != 's':
            print("‚ùå An√°lisis inicial cancelado")
            return False
        
        print("\nüîÑ Iniciando an√°lisis inicial...")
        analyzer = InitialDocumentAnalyzer()
        analyzer.run_initial_analysis(force_full=True)
        
        print("‚úÖ An√°lisis inicial completado exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis inicial: {e}")
        return False

def setup_weekly_monitoring():
    """Configurar monitoreo semanal"""
    print("\nüìÖ CONFIGURANDO MONITOREO SEMANAL")
    print("=" * 40)
    
    try:
        from weekly_document_monitor import WeeklyDocumentMonitor
        
        print("üìã El monitoreo semanal:")
        print("   ‚Ä¢ Se ejecutar√° autom√°ticamente cada viernes a las 02:00")
        print("   ‚Ä¢ Detectar√° documentos nuevos y modificados")
        print("   ‚Ä¢ Generar√° reportes semanales")
        print("   ‚Ä¢ Verificar√° el estado del sistema diariamente")
        
        confirm = input("\n¬øConfigurar monitoreo semanal autom√°tico? (s/n): ").lower()
        if confirm != 's':
            print("‚ùå Monitoreo semanal no configurado")
            return False
        
        print("\nüîÑ Configurando monitoreo semanal...")
        monitor = WeeklyDocumentMonitor()
        
        # Generar reporte de configuraci√≥n
        report = monitor.generate_weekly_report()
        print("‚úÖ Monitoreo semanal configurado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error configurando monitoreo: {e}")
        return False

def test_system():
    """Probar el sistema completo"""
    print("\nüß™ PROBANDO EL SISTEMA COMPLETO")
    print("=" * 35)
    
    try:
        from test_metadata_enrichment import run_full_test
        
        print("üìã Ejecutando pruebas del sistema...")
        success = run_full_test()
        
        if success:
            print("‚úÖ Todas las pruebas pasaron")
            return True
        else:
            print("‚ö†Ô∏è Algunas pruebas fallaron")
            return False
            
    except Exception as e:
        print(f"‚ùå Error ejecutando pruebas: {e}")
        return False

def create_startup_script():
    """Crear script de inicio autom√°tico"""
    print("\nüìù CREANDO SCRIPT DE INICIO AUTOM√ÅTICO")
    print("=" * 45)
    
    script_content = """#!/bin/bash
# Script de inicio autom√°tico del sistema de cumplimiento
# Ejecutar: chmod +x start_system.sh && ./start_system.sh

echo "üöÄ Iniciando Sistema de Cumplimiento Regulatorio..."
echo "üìÖ $(date)"

# Activar entorno virtual si existe
if [ -d "venv" ]; then
    source venv/bin/activate
    echo "‚úÖ Entorno virtual activado"
fi

# Verificar variables de entorno
if [ ! -f ".env" ]; then
    echo "‚ùå Archivo .env no encontrado"
    exit 1
fi

# Iniciar monitoreo autom√°tico
echo "üîÑ Iniciando monitoreo autom√°tico..."
python auto_updater.py

echo "‚úÖ Sistema iniciado correctamente"
"""
    
    try:
        with open("start_system.sh", "w") as f:
            f.write(script_content)
        
        # Hacer ejecutable
        os.chmod("start_system.sh", 0o755)
        
        print("‚úÖ Script de inicio creado: start_system.sh")
        print("üí° Para iniciar el sistema: ./start_system.sh")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando script: {e}")
        return False

def generate_setup_report():
    """Generar reporte de configuraci√≥n"""
    print("\nüìÑ GENERANDO REPORTE DE CONFIGURACI√ìN")
    print("=" * 40)
    
    try:
        report = f"""
üìä REPORTE DE CONFIGURACI√ìN DEL SISTEMA
========================================
Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üéØ COMPONENTES CONFIGURADOS:
‚úÖ Variables de entorno verificadas
‚úÖ Conexiones con servicios externos probadas
‚úÖ An√°lisis inicial completo ejecutado
‚úÖ Monitoreo semanal configurado
‚úÖ Sistema de pruebas validado
‚úÖ Script de inicio autom√°tico creado

üöÄ FUNCIONALIDADES DISPONIBLES:
‚Ä¢ An√°lisis autom√°tico de documentos con OpenAI
‚Ä¢ Enriquecimiento de metadatos estructurados
‚Ä¢ B√∫squedas mejoradas en Pinecone
‚Ä¢ Bot de Slack con respuestas enriquecidas
‚Ä¢ Monitoreo semanal autom√°tico
‚Ä¢ Reportes y logs detallados

üìã COMANDOS DISPONIBLES:
‚Ä¢ Iniciar sistema: ./start_system.sh
‚Ä¢ An√°lisis manual: python auto_updater.py
‚Ä¢ Enriquecimiento: python enrich_existing_vectors.py
‚Ä¢ Pruebas: python test_metadata_enrichment.py
‚Ä¢ Monitoreo: python weekly_document_monitor.py

üìÖ PROGRAMACI√ìN AUTOM√ÅTICA:
‚Ä¢ An√°lisis semanal: Viernes 02:00
‚Ä¢ Verificaci√≥n diaria: 09:00
‚Ä¢ Actualizaci√≥n autom√°tica: Viernes 00:01

üéâ SISTEMA LISTO PARA PRODUCCI√ìN
"""
        
        # Guardar reporte
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"setup_report_{timestamp}.txt"
        
        with open(filename, "w", encoding="utf-8") as f:
            f.write(report)
        
        print(f"‚úÖ Reporte guardado: {filename}")
        print(report)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error generando reporte: {e}")
        return False

def main():
    """Funci√≥n principal de configuraci√≥n"""
    print("üîß CONFIGURACI√ìN COMPLETA DEL SISTEMA DE CUMPLIMIENTO")
    print("=" * 60)
    print("Este script te guiar√° a trav√©s de la configuraci√≥n completa")
    print("del sistema de an√°lisis inicial y seguimiento semanal.")
    
    steps = [
        ("Verificar variables de entorno", check_environment_variables),
        ("Probar conexiones", test_connections),
        ("Ejecutar an√°lisis inicial completo", run_initial_analysis),
        ("Configurar monitoreo semanal", setup_weekly_monitoring),
        ("Probar sistema completo", test_system),
        ("Crear script de inicio", create_startup_script),
        ("Generar reporte final", generate_setup_report)
    ]
    
    completed_steps = []
    failed_steps = []
    
    for i, (step_name, step_func) in enumerate(steps, 1):
        print(f"\n{'='*60}")
        print(f"PASO {i}/{len(steps)}: {step_name}")
        print("="*60)
        
        try:
            if step_func():
                completed_steps.append(step_name)
                print(f"‚úÖ Paso {i} completado: {step_name}")
            else:
                failed_steps.append(step_name)
                print(f"‚ùå Paso {i} fall√≥: {step_name}")
                
                # Preguntar si continuar
                if i < len(steps):
                    continue_anyway = input("\n¬øContinuar con los siguientes pasos? (s/n): ").lower()
                    if continue_anyway != 's':
                        print("‚ùå Configuraci√≥n cancelada por el usuario")
                        break
                        
        except KeyboardInterrupt:
            print("\n‚ùå Configuraci√≥n cancelada por el usuario")
            break
        except Exception as e:
            print(f"‚ùå Error inesperado en paso {i}: {e}")
            failed_steps.append(step_name)
    
    # Resumen final
    print(f"\n{'='*60}")
    print("üìä RESUMEN DE CONFIGURACI√ìN")
    print("="*60)
    print(f"‚úÖ Pasos completados: {len(completed_steps)}/{len(steps)}")
    print(f"‚ùå Pasos fallidos: {len(failed_steps)}")
    
    if completed_steps:
        print("\n‚úÖ Pasos completados:")
        for step in completed_steps:
            print(f"   ‚Ä¢ {step}")
    
    if failed_steps:
        print("\n‚ùå Pasos fallidos:")
        for step in failed_steps:
            print(f"   ‚Ä¢ {step}")
    
    if len(completed_steps) == len(steps):
        print("\nüéâ ¬°CONFIGURACI√ìN COMPLETA!")
        print("El sistema est√° listo para usar en producci√≥n.")
        print("\nüí° Pr√≥ximos pasos:")
        print("   1. Ejecutar: ./start_system.sh")
        print("   2. Verificar en Slack: /estado")
        print("   3. Probar b√∫squedas: /cumplimiento [consulta]")
    else:
        print("\n‚ö†Ô∏è Configuraci√≥n incompleta")
        print("Revisa los pasos fallidos antes de usar el sistema.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå Configuraci√≥n cancelada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error general: {e}")
        sys.exit(1) 