#!/usr/bin/env python3
"""
Script para configurar m√∫ltiples carpetas de an√°lisis en el sistema
Permite analizar todas las carpetas relevantes de VIZUM TECHNOLOGIES
"""

import os
from pathlib import Path

def update_auto_updater_config():
    """Actualizar configuraci√≥n de auto_updater.py para m√∫ltiples carpetas"""
    
    auto_updater_file = Path('auto_updater.py')
    
    if not auto_updater_file.exists():
        print("‚ùå No se encontr√≥ auto_updater.py")
        return False
    
    # Leer contenido actual
    with open(auto_updater_file, 'r') as f:
        content = f.read()
    
    # Definir m√∫ltiples carpetas para an√°lisis
    new_folder_config = '''# Configuraci√≥n de carpetas m√∫ltiples
FOLDER_PATHS = [
    "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES",
    "/IA/PRUEBAS/Auditor√≠as Vizum CNBV y anuales",
    "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Auditor√≠as",
    "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Regulaciones",
    "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Compliance",
    "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Documentos",
    "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Reportes",
    "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Manuales",
    "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Pol√≠ticas",
    "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Procedimientos"
]

# Carpeta principal para compatibilidad
FOLDER_PATH = "/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES"'''
    
    # Reemplazar la configuraci√≥n de carpeta √∫nica
    lines = content.split('\n')
    updated_lines = []
    folder_config_found = False
    
    for line in lines:
        if line.strip().startswith('FOLDER_PATH = '):
            if not folder_config_found:
                # Insertar nueva configuraci√≥n
                updated_lines.extend(new_folder_config.split('\n'))
                folder_config_found = True
        else:
            updated_lines.append(line)
    
    # Si no se encontr√≥ la configuraci√≥n, agregarla despu√©s de las importaciones
    if not folder_config_found:
        new_lines = []
        for i, line in enumerate(lines):
            new_lines.append(line)
            if 'load_dotenv()' in line:
                # Agregar despu√©s de load_dotenv()
                new_lines.extend([''] + new_folder_config.split('\n'))
        updated_lines = new_lines
    
    # Escribir archivo actualizado
    with open(auto_updater_file, 'w') as f:
        f.write('\n'.join(updated_lines))
    
    return True

def update_scan_function():
    """Actualizar funci√≥n de escaneo para m√∫ltiples carpetas"""
    
    auto_updater_file = Path('auto_updater.py')
    
    if not auto_updater_file.exists():
        return False
    
    # Leer contenido actual
    with open(auto_updater_file, 'r') as f:
        content = f.read()
    
    # Nueva funci√≥n de escaneo m√∫ltiple
    new_scan_function = '''def scan_for_new_files():
    """Escanear m√∫ltiples carpetas de Dropbox en busca de archivos nuevos"""
    logger.info("üîç Iniciando escaneo de archivos en m√∫ltiples carpetas de Dropbox...")
    
    try:
        # Obtener cliente de Dropbox v√°lido
        dbx = get_dropbox_client()
        
        total_files = 0
        processed_files = 0
        
        # Escanear cada carpeta configurada
        for folder_path in FOLDER_PATHS:
            try:
                logger.info(f"üìÅ Escaneando carpeta: {folder_path}")
                
                # Obtener lista de archivos en la carpeta
                result = dbx.files_list_folder(folder_path, recursive=True)
                
                for entry in result.entries:
                    if isinstance(entry, dropbox.files.FileMetadata) and is_supported_file(entry.path_lower):
                        total_files += 1
                        logger.info(f"üìÑ Procesando archivo: {entry.path_lower}")
                        if process_file(entry.path_lower):
                            processed_files += 1
                            
            except dropbox.exceptions.ApiError as e:
                if e.error.is_path():
                    logger.warning(f"‚ö†Ô∏è Carpeta no encontrada: {folder_path}")
                else:
                    logger.error(f"‚ùå Error accediendo a {folder_path}: {e}")
            except Exception as e:
                logger.error(f"‚ùå Error escaneando {folder_path}: {e}")
        
        logger.info(f"üìä Resumen del escaneo m√∫ltiple:")
        logger.info(f"   - Carpetas escaneadas: {len(FOLDER_PATHS)}")
        logger.info(f"   - Total de archivos encontrados: {total_files}")
        logger.info(f"   - Archivos procesados exitosamente: {processed_files}")
        
        return processed_files
        
    except Exception as e:
        logger.error(f"‚ùå Error en escaneo m√∫ltiple: {e}")
        return 0'''
    
    # Reemplazar funci√≥n existente
    lines = content.split('\n')
    updated_lines = []
    in_scan_function = False
    function_replaced = False
    
    for line in lines:
        if 'def scan_for_new_files():' in line:
            in_scan_function = True
            function_replaced = True
            # Agregar nueva funci√≥n
            updated_lines.extend(new_scan_function.split('\n'))
            continue
        
        if in_scan_function:
            if line.strip().startswith('def ') and not line.strip().startswith('def scan_for_new_files'):
                in_scan_function = False
                updated_lines.append(line)
            elif not line.strip().startswith('def '):
                continue  # Saltar l√≠neas dentro de la funci√≥n antigua
            else:
                in_scan_function = False
                updated_lines.append(line)
        else:
            updated_lines.append(line)
    
    # Si no se encontr√≥ la funci√≥n, agregarla al final
    if not function_replaced:
        updated_lines.extend(['', new_scan_function])
    
    # Escribir archivo actualizado
    with open(auto_updater_file, 'w') as f:
        f.write('\n'.join(updated_lines))
    
    return True

def create_folder_analysis_report():
    """Crear reporte de an√°lisis de carpetas"""
    
    report_content = '''# üìÅ CONFIGURACI√ìN DE CARPETAS M√öLTIPLES

## üéØ Carpetas Configuradas para An√°lisis

### 1. üìÇ Carpeta Principal
- **Ruta:** `/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES`
- **Contenido:** Documentos generales de VIZUM TECHNOLOGIES

### 2. üìÇ Auditor√≠as CNBV
- **Ruta:** `/IA/PRUEBAS/Auditor√≠as Vizum CNBV y anuales`
- **Contenido:** Auditor√≠as espec√≠ficas de CNBV y anuales

### 3. üìÇ Subcarpetas de VIZUM TECHNOLOGIES
- **Auditor√≠as:** `/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Auditor√≠as`
- **Regulaciones:** `/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Regulaciones`
- **Compliance:** `/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Compliance`
- **Documentos:** `/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Documentos`
- **Reportes:** `/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Reportes`
- **Manuales:** `/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Manuales`
- **Pol√≠ticas:** `/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Pol√≠ticas`
- **Procedimientos:** `/Leopoldo Bassoco Nova/IA/PRUEBAS/VIZUM TECHNOLOGIES/Procedimientos`

## üîÑ Funcionalidades

### ‚úÖ Escaneo M√∫ltiple
- An√°lisis autom√°tico de todas las carpetas configuradas
- Detecci√≥n de archivos nuevos y modificados
- Procesamiento recursivo de subcarpetas

### ‚úÖ Metadatos Enriquecidos
- An√°lisis de tipo de documento por carpeta
- Categorizaci√≥n autom√°tica por contexto
- Enriquecimiento con IA para mejor b√∫squeda

### ‚úÖ B√∫squeda Sem√°ntica
- B√∫squeda en todos los documentos de todas las carpetas
- Filtrado por tipo de documento y categor√≠a
- Respuestas contextuales mejoradas

## üöÄ Pr√≥ximos Pasos

1. **Configurar credenciales de Dropbox** (si no est√°n configuradas)
2. **Ejecutar an√°lisis inicial completo**
3. **Configurar actualizaci√≥n autom√°tica**
4. **Probar b√∫squedas en Slack**

## üìä M√©tricas Esperadas

- **Carpetas monitoreadas:** 10
- **Tipos de documentos:** PDF, Word, Excel, PowerPoint, im√°genes
- **Procesamiento:** OCR autom√°tico cuando sea necesario
- **Actualizaci√≥n:** Semanal autom√°tica
'''
    
    with open('CONFIGURACION_CARPETAS_MULTIPLES.md', 'w') as f:
        f.write(report_content)
    
    return True

def main():
    print("üîß CONFIGURANDO AN√ÅLISIS DE M√öLTIPLES CARPETAS")
    print("=" * 50)
    
    print("üìÅ Actualizando configuraci√≥n de carpetas...")
    if update_auto_updater_config():
        print("‚úÖ Configuraci√≥n de carpetas actualizada")
    else:
        print("‚ùå Error actualizando configuraci√≥n")
        return
    
    print("üîÑ Actualizando funci√≥n de escaneo...")
    if update_scan_function():
        print("‚úÖ Funci√≥n de escaneo actualizada")
    else:
        print("‚ùå Error actualizando funci√≥n de escaneo")
        return
    
    print("üìÑ Creando reporte de configuraci√≥n...")
    if create_folder_analysis_report():
        print("‚úÖ Reporte de configuraci√≥n creado")
    else:
        print("‚ùå Error creando reporte")
        return
    
    print()
    print("üéâ CONFIGURACI√ìN COMPLETADA")
    print("=" * 30)
    print("‚úÖ Sistema configurado para analizar m√∫ltiples carpetas")
    print("‚úÖ Escaneo recursivo habilitado")
    print("‚úÖ Metadatos enriquecidos activados")
    print()
    print("üöÄ Pr√≥ximos pasos:")
    print("1. Configurar credenciales de Dropbox (si es necesario)")
    print("2. Ejecutar: python setup_complete_system.py")
    print("3. Ejecutar: python auto_updater.py")
    print("4. Probar b√∫squedas en Slack")

if __name__ == "__main__":
    main() 