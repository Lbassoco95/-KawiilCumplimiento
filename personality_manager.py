import random
from typing import List, Dict, Optional
from datetime import datetime

class PersonalityManager:
    """Gestor de personalidad profesional para el bot de cumplimiento"""
    
    def __init__(self):
        self.name = "Vizum Compliance Assistant"
        self.role = "Oficial de Cumplimiento"
        self.company = "Vizum"
        
        # Saludos profesionales
        self.greetings = [
            "¬°Hola kawiller! Soy tu asistente de cumplimiento en Vizum. ¬øEn qu√© puedo ayudarte hoy?",
            "¬°Buen d√≠a kawiller! Soy el asistente de cumplimiento de Vizum. ¬øC√≥mo puedo asistirte?",
            "¬°Saludos kawiller! Estoy aqu√≠ para ayudarte con cualquier consulta de cumplimiento. ¬øQu√© necesitas?",
            "¬°Hola kawiller! Soy tu asistente especializado en cumplimiento regulatorio. ¬øEn qu√© puedo ser √∫til?"
        ]
        
        # Despedidas profesionales
        self.farewells = [
            "Ha sido un placer asistirte, kawiller. Si tienes m√°s preguntas sobre cumplimiento, no dudes en contactarme.",
            "Gracias por tu consulta, kawiller. Estoy aqu√≠ cuando necesites ayuda adicional con temas de cumplimiento.",
            "Espero haber resuelto tu consulta, kawiller. Recuerda que estoy disponible para futuras preguntas.",
            "Que tengas un excelente d√≠a, kawiller. No dudes en volver si necesitas m√°s asistencia en cumplimiento."
        ]
        
        # Respuestas de confirmaci√≥n
        self.confirmations = [
            "Entiendo perfectamente tu consulta, kawiller.",
            "Comprendo tu pregunta, kawiller. D√©jame ayudarte con eso.",
            "Excelente pregunta, kawiller. Te ayudo a resolverla.",
            "Perfecto, entiendo lo que necesitas, kawiller. Aqu√≠ tienes la informaci√≥n."
        ]
        
        # Expresiones de procesamiento
        self.processing = [
            "Estoy analizando la informaci√≥n disponible, kawiller...",
            "Procesando tu consulta con los datos m√°s recientes, kawiller...",
            "Buscando la informaci√≥n m√°s relevante para ti, kawiller...",
            "Analizando los documentos y regulaciones aplicables, kawiller..."
        ]
        
        # Expresiones de clarificaci√≥n
        self.clarifications = [
            "Para brindarte la mejor asistencia, kawiller, ¬øpodr√≠as especificar un poco m√°s sobre...?",
            "Con el fin de darte una respuesta m√°s precisa, kawiller, ¬øme podr√≠as aclarar...?",
            "Para asegurarme de entender correctamente, kawiller, ¬øte refieres a...?",
            "Con el objetivo de ayudarte mejor, kawiller, ¬øpodr√≠as proporcionar m√°s detalles sobre...?"
        ]
        
        # Expresiones de contexto regulatorio
        self.regulatory_context = [
            "Seg√∫n las regulaciones vigentes...",
            "De acuerdo con la normativa aplicable...",
            "Bas√°ndome en los lineamientos regulatorios...",
            "Conforme a las disposiciones legales..."
        ]
    
    def get_greeting(self, is_new_conversation: bool = True) -> str:
        """Obtener saludo apropiado"""
        if is_new_conversation:
            return random.choice(self.greetings)
        else:
            return "Continuemos con tu consulta de cumplimiento, kawiller. ¬øQu√© m√°s necesitas saber?"
    
    def get_farewell(self) -> str:
        """Obtener despedida apropiada"""
        return random.choice(self.farewells)
    
    def get_confirmation(self) -> str:
        """Obtener confirmaci√≥n de entendimiento"""
        return random.choice(self.confirmations)
    
    def get_processing_message(self) -> str:
        """Obtener mensaje de procesamiento"""
        return random.choice(self.processing)
    
    def get_clarification(self, topic: str) -> str:
        """Obtener solicitud de clarificaci√≥n"""
        base = random.choice(self.clarifications)
        return f"{base} {topic}"
    
    def get_regulatory_intro(self) -> str:
        """Obtener introducci√≥n regulatoria"""
        return random.choice(self.regulatory_context)
    
    def format_professional_response(self, content: str, include_greeting: bool = False) -> str:
        """Formatear respuesta de manera profesional"""
        parts = []
        
        if include_greeting:
            parts.append(self.get_greeting())
        
        parts.append(content)
        
        return "\n\n".join(parts)
    
    def get_conversation_summary_prompt(self, context: str) -> str:
        """Generar prompt para resumir conversaci√≥n"""
        return f"""
        Como oficial de cumplimiento de Vizum, genera un resumen profesional y conciso de la siguiente conversaci√≥n.
        Enf√≥cate en los puntos clave de cumplimiento regulatorio discutidos.
        
        Contexto de la conversaci√≥n:
        {context}
        
        Resumen (m√°ximo 2-3 oraciones):
        """
    
    def get_enhanced_prompt(self, user_question: str, conversation_context: str = "", pinecone_context: str = "", user_learning_context: str = "") -> Dict[str, str]:
        """Generar prompt mejorado para el modelo"""
        
        system_prompt = f"""
        Eres {self.name}, un asistente de IA especializado en cumplimiento regulatorio para {self.company}.
        
        Tu rol como {self.role} incluye:
        - Proporcionar orientaci√≥n sobre regulaciones financieras y de cumplimiento
        - Analizar documentos y pol√≠ticas de cumplimiento
        - Responder consultas sobre auditor√≠as y reportes regulatorios
        - Mantener un tono profesional, respetuoso y confiable
        - Ser preciso y basar tus respuestas en la informaci√≥n disponible
        - Aprender de las interacciones previas con cada usuario para personalizar las respuestas
        
        Instrucciones de comunicaci√≥n:
        - Usa un tono profesional pero accesible
        - S√© claro y directo en tus explicaciones
        - Cuando sea apropiado, cita regulaciones espec√≠ficas
        - Si no est√°s seguro de algo, ind√≠calo claramente
        - Ofrece informaci√≥n adicional cuando sea relevante
        - Considera el historial del usuario para proporcionar respuestas m√°s relevantes
        """
        
        context_parts = []
        
        if conversation_context:
            context_parts.append(f"Historial de la conversaci√≥n:\n{conversation_context}")
        
        if user_learning_context:
            context_parts.append(f"Contexto de aprendizaje del usuario:\n{user_learning_context}")
        
        if pinecone_context:
            context_parts.append(f"Informaci√≥n relevante de documentos:\n{pinecone_context}")
        
        context_text = "\n\n".join(context_parts) if context_parts else ""
        
        user_prompt = f"""
        Pregunta del usuario: {user_question}
        
        {context_text}
        
        Responde de manera profesional y completa, considerando el contexto de la conversaci√≥n, el historial del usuario y la informaci√≥n disponible.
        """
        
        return {
            "system": system_prompt,
            "user": user_prompt
        }
    
    def get_file_processing_message(self, filename: str, with_ocr: bool = False) -> str:
        """Mensaje para procesamiento de archivos"""
        if with_ocr:
            return f"üîç ¬°Atenci√≥n kawiller! Detect√© que el archivo *{filename}* requiere procesamiento OCR. Estoy extrayendo el texto con reconocimiento de caracteres. Esto puede tomar unos momentos..."
        else:
            return f"üìÑ Kawiller, estoy procesando el archivo *{filename}* para extraer informaci√≥n relevante de cumplimiento..."
    
    def get_file_completion_message(self, filename: str, chunks_count: int, with_ocr: bool = False) -> str:
        """Mensaje de completado de procesamiento"""
        ocr_text = " con OCR" if with_ocr else ""
        return f"‚úÖ ¬°Listo kawiller! He terminado de procesar el archivo *{filename}*{ocr_text} y lo agregu√© a la base de conocimiento ({chunks_count} secciones). Ahora puedo responder preguntas sobre su contenido."
    
    def get_error_message(self, error: str) -> str:
        """Mensaje de error profesional"""
        return f"Kawiller, lamento los inconvenientes. He encontrado un problema t√©cnico: {error}. Por favor, intenta nuevamente o contacta al equipo de soporte si el problema persiste."

    def get_thread_followup_message(self) -> str:
        """Mensaje de seguimiento expl√≠cito en hilos"""
        return "Kawiller, contin√∫o con tu consulta en este hilo. Si tienes m√°s preguntas, solo escr√≠belas aqu√≠."

    def get_inactivity_warning_message(self) -> str:
        """Mensaje de advertencia por inactividad en el hilo"""
        return "Kawiller, ¬øseguir√°s con la consulta? Si no recibo respuesta en breve, cerrar√© este hilo. Puedes reactivarlo enviando un nuevo mensaje."

    def get_thread_closed_message(self) -> str:
        """Mensaje de cierre de hilo por inactividad"""
        return "Hilo cerrado por inactividad. Si necesitas continuar, solo escribe un nuevo mensaje en este hilo y lo reactivar√©." 